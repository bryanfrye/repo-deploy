---
# Managed by repo-deploy

name: Deploy Infrastructure

'on':
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  lint:
    name: Run Linters
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Read requested linters
        id: read-linters
        run: |
          if [[ -f .linters ]]; then
            LINTERS=$(cat .linters | tr '\n' ',')
          else
            LINTERS="none"
          fi
          echo "LINTERS=$LINTERS" >> $GITHUB_ENV

      - name: Install requested linters
        run: |
          LINTER_LIST=$(echo "$LINTERS" | sed 's/,$//')
          for linter in ${LINTER_LIST//,/ }; do
            case "$linter" in
              yaml)
                pip install yamllint
                ;;
              cloudformation)
                pip install cfn-lint
                ;;
              cfn_nag)
                sudo apt-get update
                sudo apt-get install -y ruby \
                ruby-dev build-essential
                sudo gem install cfn-nag
                ;;
              shell)
                sudo apt-get update && sudo apt-get install -y shellcheck
                ;;
              ansible)
                pip install ansible-lint
                ;;
              terraform)
                sudo apt-get install -y terraform
                ;;
              puppet)
                sudo gem install puppet-lint
                ;;
              ruby)
                sudo gem install rubocop
                ;;
              python)
                pip install pylint
                ;;
              markdown)
                npm install -g markdownlint-cli
                ;;
              *)
                echo "Unknown linter: $linter"
                ;;
            esac
          done

      - name: Run selected linters
        run: |
          echo "Running linters: $LINTERS"
          ./scripts/run_linters.sh

  deploy:
    runs-on: ubuntu-latest
    needs: lint
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch latest repo-deploy commit hash
        run: |
          curl -s \
            https://api.github.com/repos/bryanfrye/repo-deploy/commits/main \
            | jq -r '.sha' | cut -c1-7 > latest-hash.txt

      - name: Compare repo-deploy version
        run: |
          CURRENT=$(cat .repo-deploy-version)
          LATEST=$(cat latest-hash.txt)

          echo "üîÅ Repo-deploy version check:"
          echo "üîí Current: $CURRENT"
          echo "üåê Latest : $LATEST"

          if [[ "$CURRENT" != "$LATEST" ]]; then
            echo "‚ùå Repo is using an outdated repo-deploy config."
            echo "Please re-bootstrap or run the sync script"
            echo "to pull the latest workflow/scripts."
            exit 1
          fi

      - name: Parse stages from repo.toml
        id: parse-stages
        run: |
          echo "üì¶ Parsing stages from repo.toml..."
          STAGES=$(grep -oP 'stages\s*=\s*\[\K[^\]]+' repo.toml | \
                   tr -d '"' | tr -d ' ' | tr ',' '\n' | paste -sd, -)
          echo "STAGES=$STAGES" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          echo "üì¶ Installing dependencies..."
          sudo apt-get update
          for stage in $(echo "$STAGES" | tr ',' '\n'); do
            provider="${stage%%.*}"
            role="${stage#*.}"
            echo "üîß Installing dependencies for $provider / $role"

            case "$provider" in
              aws)
                echo "Installing AWS CLI v2..."
                curl -s "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" \
                  -o "awscliv2.zip"
                unzip -q awscliv2.zip
                sudo ./aws/install
                ;;
              azure)
                curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
                ;;
              gcp)
                curl https://sdk.cloud.google.com | bash
                exec -l $SHELL
                gcloud init
                ;;
              ansible)
                sudo apt-get install -y ansible
                ;;
              *)
                echo "Unknown provider: $provider"
                exit 1
                ;;
            esac
          done
      - name: Deploy
        run: |
          echo "üöÄ Deploying infrastructure..."
          for stage in $(echo "$STAGES" | tr ',' '\n'); do
            provider="${stage%%.*}
            role="${stage#*.}"
            echo "üîß Deploying $provider / $role"

            case "$provider" in
              aws|azure|gcp)
                script="./repo-deploy/scripts/deploy_${provider}.sh"
                if [[ -x "$script" ]]; then
                  "$script" "$role" || {
                    echo "‚ùå Deployment failed for $provider / $role"
                    exit 1
                  }
                else
                  echo "‚ùå No deploy script found for $provider"
                  exit 1
                fi
                ;;
              ansible)
                playbook="deploy/ansible/${role}.playbook"
                inventory="deploy/ansible/${role}.inventory"
                if [[ -f "$playbook" && -f "$inventory" ]]; then
                  ansible-playbook -i "$inventory" "$playbook" || {
                    echo "‚ùå Ansible deployment failed for $role"
                    exit 1
                  }
                else
                  echo "‚ùå Playbook or inventory not found for $role"
                  exit 1
                fi
                ;;
              *)
                echo "‚ùå Unknown provider: $provider"
                exit 1
                ;;
            esac
          done
